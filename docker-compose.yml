version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pindrop-postgres
    environment:
      POSTGRES_DB: pindrop_db
      POSTGRES_USER: pindrop_user
      POSTGRES_PASSWORD: pindrop_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - pindrop-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pindrop_user -d pindrop_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: pindrop-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://pindrop_user:pindrop_password@postgres:5432/pindrop_db?schema=public
      JWT_SECRET: your-super-secret-jwt-key-here
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-here
      PORT: 3001
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pindrop-network
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: pindrop-frontend
    environment:
      VITE_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - pindrop-network
    command: npm run dev

  # Redis (for future use)
  redis:
    image: redis:7-alpine
    container_name: pindrop-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pindrop-network
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:

networks:
  pindrop-network:
    driver: bridge
